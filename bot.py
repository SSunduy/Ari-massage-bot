from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio
import logging
from datetime import datetime

from config import BOT_TOKEN, ADMINS
from database import init_db, get_available_slots, book_slot, get_bookings_by_date
from keyboards import get_main_keyboard, get_time_keyboard

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ari_massag_bot!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())

@dp.callback_query(F.data == "book")
async def process_book(callback: CallbackQuery):
    today = datetime.now().strftime("%Y-%m-%d")
    kb = get_time_keyboard(today)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=kb)

@dp.callback_query(F.data.startswith("time_"))
async def process_time(callback: CallbackQuery):
    _, time, date = callback.data.split("_")
    user_id = callback.from_user.id
    username = callback.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    book_slot(user_id, username, time, date)
    await callback.message.edit_text(f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {time} ({date})!")
    await bot.send_message(ADMIN_ID, f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å: @{username} –Ω–∞ {time} ({date})")

@dp.callback_query(F.data == "view")
async def process_view(callback: CallbackQuery):
    today = datetime.now().strftime("%Y-%m-%d")
    bookings = get_bookings_by_date(today)
    if not bookings:
        await callback.message.edit_text("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
    else:
        text = "üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n" + "\n".join([f"{name} ‚Äî {t}" for name, t in bookings])
        await callback.message.edit_text(text)

@dp.message(Command("admin"))
async def cmd_admin(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    today = datetime.now().strftime("%Y-%m-%d")
    bookings = get_bookings_by_date(today)
    if not bookings:
        await message.answer("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
    else:
        text = "üîê –ê–¥–º–∏–Ω–∫–∞ ‚Äî –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n" + "\n".join([f"{name} ‚Äî {t}" for name, t in bookings])
        await message.answer(text)

async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())